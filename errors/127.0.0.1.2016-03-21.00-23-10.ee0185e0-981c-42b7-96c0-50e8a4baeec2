(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> No columns to parse from file"
p3
sS'layer'
p4
S'/home/dolor/Downloads/web2py/applications/Quiz1/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\ndef index():\n    #db.survey.description.readable=False\n    #db.survey.choices.readable=False\n    # db.survey.name.represent = lambda name,row: A(name,_href=URL(\'take_survey\',args=row.uuid))\n    #grid = SQLFORM.grid(db.survey.created_by==auth.user_id,create=False,editable=False,deletable=True,details=False,\n                       #links=[#lambda row: A(\'take\',_href=URL(\'take_survey\',args=row.uuid),_class="btn"),\n                             #lambda row: A(\'results\',_href=URL(\'see_results\',args=row.uuid),_class="btn")])\n    return locals()\n\nimport pandas as pd\nimport pygal\nfrom pygal.style import CleanStyle\ndef plot_pygal():\n   response.headers[\'Content-Type\']=\'image/svg+xml\'\n   bar_chart = pygal.Bar(style=CleanStyle)                                            # Then create a bar graph object\n   bar_chart.add(\'Fibonacci\', [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55])  # Add some values\n   return bar_chart.render()\n\ndef cvs_pygal():\n    response.headers[\'Content-Type\']=\'image/svg+xml\'\n    budget = pd.read_csv(r"/home/dolor/Downloads/web2py/applications/Quiz1/controllers/")\n    budget = budget.sort(\'amount\',ascending=False)[:10]\n    bar_chart = pygal.Bar(style=LightStyle, width=800, height=600,legend_at_bottom=True, human_readable=True,title=\'MN Capital Budget - 2014\')\n    for index, row in budget.iterrows():\n        bar_chart.add(row["detail"], row["amount"])\n    return bar_chart.render()\n\n\n\n\n@auth.requires_login()\ndef create_survey():\n    def f(form):\n        #form.vars.results = [0]*len(request.vars.choices)\n        form.vars.results = request.vars.choices\n    from gluon.utils import web2py_uuid,time\n    db.survey.uuid.default = uuid = web2py_uuid()\n    form = SQLFORM(db.survey).process(session=None, formname=\'test\',onvalidation=f)\n    if form.accepted:\n        time.sleep(4)\n        redirect(URL(\'thank_you\',args=uuid))\n    return locals()\n\n\n@auth.requires_membership(\'managers\')\ndef manage():\n    grid = SQLFORM.grid(db.survey.created_by==auth.user_id,create=False,editable=False,deletable=True,details=False,\n                       links=[#lambda row: A(\'take\',_href=URL(\'take_survey\',args=row.uuid),_class="btn"),\n                              lambda row: A(\'results\',_href=URL(\'see_results\',args=row.uuid),_class="btn")])\n    return locals()\n\n\n@auth.requires_login()\ndef take_survey():\n    uuid = request.args(0)\n    survey = db.survey(uuid=uuid)\n    if survey.requires_login:\n        if not auth.user:\n            redirect(URL(\'user/login\',vars=dict(_next=URL(args=request.args))))\n        #vote = db.vote(survey=survey.id,created_by=auth.user.id)\n        participate = db.survey(uuid=uuid,created_by=auth.user.id)\n        if participate:\n            session.flash = \'Du har redan deltagit, dumma fan!!\'\n            redirect(URL(\'thank_you\'))\n    if request.post_vars:\n        #k = int(request.post_vars.choice)\n        k = request.post_vars.choice\n        #survey.results[k]+=0\n        survey.update_record(results=survey.results)\n        db.vote.insert(survey=survey.id)\n        redirect(URL(\'thank_you\'))\n    return locals()\n\n@auth.requires_login()\ndef see_results():\n    uuid = request.args(0)\n    survey = db.survey(uuid=uuid)\n    if survey.created_by!=auth.user.id:\n        session.flash = \'User not authorized\'\n        redirect(URL(\'index\'))\n    return locals()\n\ndef thank_you():\n    return dict()\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/bulk_register\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    also notice there is http://..../[app]/appadmin/manage/auth to allow administrator to manage users\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\nresponse._vars=response._caller(cvs_pygal)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/dolor/Downloads/web2py/gluon/restricted.py", line 227, in restricted\n    exec ccode in environment\n  File "/home/dolor/Downloads/web2py/applications/Quiz1/controllers/default.py", line 124, in <module>\n  File "/home/dolor/Downloads/web2py/gluon/globals.py", line 412, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/dolor/Downloads/web2py/applications/Quiz1/controllers/default.py", line 22, in cvs_pygal\n    budget = pd.read_csv(r"/home/dolor/Downloads/web2py/applications/Quiz1/controllers/")\n  File "/usr/lib/python2.7/site-packages/pandas/io/parsers.py", line 498, in parser_f\n    return _read(filepath_or_buffer, kwds)\n  File "/usr/lib/python2.7/site-packages/pandas/io/parsers.py", line 275, in _read\n    parser = TextFileReader(filepath_or_buffer, **kwds)\n  File "/usr/lib/python2.7/site-packages/pandas/io/parsers.py", line 590, in __init__\n    self._make_engine(self.engine)\n  File "/usr/lib/python2.7/site-packages/pandas/io/parsers.py", line 731, in _make_engine\n    self._engine = CParserWrapper(self.f, **self.options)\n  File "/usr/lib/python2.7/site-packages/pandas/io/parsers.py", line 1103, in __init__\n    self._reader = _parser.TextReader(src, **kwds)\n  File "pandas/parser.pyx", line 518, in pandas.parser.TextReader.__cinit__ (pandas/parser.c:5030)\nValueError: No columns to parse from file\n'
p11
s.